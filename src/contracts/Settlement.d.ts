/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])": FunctionFragment;
    "allCanceledHashes(uint256,uint256)": FunctionFragment;
    "cancelOrder(tuple)": FunctionFragment;
    "canceled(bytes32)": FunctionFragment;
    "canceledHashesOfFromToken(address,uint256,uint256)": FunctionFragment;
    "canceledHashesOfMaker(address,uint256,uint256)": FunctionFragment;
    "canceledHashesOfToToken(address,uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeDenominator()": FunctionFragment;
    "feeNumerator()": FunctionFragment;
    "fillOrder(tuple)": FunctionFragment;
    "fillOrders(tuple[])": FunctionFragment;
    "filledAmountInOfHash(bytes32)": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "hashOfOrder(address,address,address,uint256,uint256,address,uint256)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256)": FunctionFragment;
    "numberOfAllCanceledHashes()": FunctionFragment;
    "numberOfCanceledHashesOfFromToken(address)": FunctionFragment;
    "numberOfCanceledHashesOfMaker(address)": FunctionFragment;
    "numberOfCanceledHashesOfToToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])": FunctionFragment;
    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])": FunctionFragment;
    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])": FunctionFragment;
    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])": FunctionFragment;
    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allCanceledHashes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "canceled", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canceledHashesOfFromToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledHashesOfMaker",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledHashesOfToToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrders",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAmountInOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOfOrder",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAllCanceledHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCanceledHashesOfFromToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCanceledHashesOfMaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCanceledHashesOfToToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCanceledHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canceled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canceledHashesOfFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledHashesOfMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledHashesOfToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledAmountInOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOfOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAllCanceledHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCanceledHashesOfFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCanceledHashesOfMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCanceledHashesOfToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;

  events: {
    "OrderCanceled(bytes32)": EventFragment;
    "OrderFeeTransferred(bytes32,address,uint256)": EventFragment;
    "OrderFilled(bytes32,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFeeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Settlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SettlementInterface;

  functions: {
    WETH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "WETH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canceled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canceled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    canceledHashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "canceledHashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    canceledHashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "canceledHashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    canceledHashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "canceledHashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    factory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "factory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feeDenominator(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeDenominator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeNumerator(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeNumerator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountIn: BigNumber;
      0: BigNumber;
    }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountOut: BigNumber;
      0: BigNumber;
    }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    hashOfOrder(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hashOfOrder(address,address,address,uint256,uint256,address,uint256)"(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,uint256)"(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    numberOfAllCanceledHashes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfAllCanceledHashes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfCanceledHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfCanceledHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfCanceledHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfCanceledHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numberOfCanceledHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numberOfCanceledHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountB: BigNumber;
      0: BigNumber;
    }>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFee(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFee(uint256,uint256)"(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])"(
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
    token: string,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  allCanceledHashes(
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "allCanceledHashes(uint256,uint256)"(
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  cancelOrder(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(tuple)"(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canceled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "canceled(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canceledHashesOfFromToken(
    fromToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "canceledHashesOfFromToken(address,uint256,uint256)"(
    fromToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  canceledHashesOfMaker(
    maker: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "canceledHashesOfMaker(address,uint256,uint256)"(
    maker: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  canceledHashesOfToToken(
    toToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "canceledHashesOfToToken(address,uint256,uint256)"(
    toToken: string,
    page: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "feeDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  fillOrder(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fillOrder(tuple)"(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fillOrders(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fillOrders(tuple[])"(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  filledAmountInOfHash(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "filledAmountInOfHash(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsIn(uint256,address[])"(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsOut(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hashOfOrder(
    maker: string,
    fromToken: string,
    toToken: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    recipient: string,
    deadline: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOfOrder(address,address,address,uint256,uint256,address,uint256)"(
    maker: string,
    fromToken: string,
    toToken: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    recipient: string,
    deadline: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    owner: string,
    _factory: string,
    _WETH: string,
    _feeNumerator: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,uint256)"(
    owner: string,
    _factory: string,
    _WETH: string,
    _feeNumerator: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  numberOfAllCanceledHashes(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAllCanceledHashes()"(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfCanceledHashesOfFromToken(
    fromToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfCanceledHashesOfFromToken(address)"(
    fromToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfCanceledHashesOfMaker(
    maker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfCanceledHashesOfMaker(address)"(
    maker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfCanceledHashesOfToToken(
    toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "numberOfCanceledHashesOfToToken(address)"(
    toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quote(uint256,uint256,uint256)"(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHSupportingFeeOnTransferTokens(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermit(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])"(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])"(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFee(
    _feeNumerator: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFee(uint256,uint256)"(
    _feeNumerator: BigNumberish,
    _feeDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    canceled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "canceled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canceledHashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "canceledHashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    canceledHashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "canceledHashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    canceledHashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "canceledHashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hashOfOrder(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOfOrder(address,address,address,uint256,uint256,address,uint256)"(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,uint256)"(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfAllCanceledHashes(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAllCanceledHashes()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountToken: BigNumber;
      amountETH: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFee(uint256,uint256)"(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OrderCanceled(hash: BytesLike | null): EventFilter;

    OrderFeeTransferred(
      hash: BytesLike | null,
      recipient: string | null,
      amount: null
    ): EventFilter;

    OrderFilled(
      hash: BytesLike | null,
      amountIn: null,
      amountOut: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    canceled(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "canceled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canceledHashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canceledHashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canceledHashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canceledHashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canceledHashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canceledHashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOfOrder(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOfOrder(address,address,address,uint256,uint256,address,uint256)"(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,uint256)"(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    numberOfAllCanceledHashes(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAllCanceledHashes()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfCanceledHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfCanceledHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFee(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFee(uint256,uint256)"(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    allCanceledHashes(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allCanceledHashes(uint256,uint256)"(
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(tuple)"(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canceled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canceled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canceledHashesOfFromToken(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canceledHashesOfFromToken(address,uint256,uint256)"(
      fromToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canceledHashesOfMaker(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canceledHashesOfMaker(address,uint256,uint256)"(
      maker: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canceledHashesOfToToken(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canceledHashesOfToToken(address,uint256,uint256)"(
      toToken: string,
      page: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fillOrder(tuple)"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fillOrders(tuple[])"(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "filledAmountInOfHash(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOfOrder(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOfOrder(address,address,address,uint256,uint256,address,uint256)"(
      maker: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,uint256)"(
      owner: string,
      _factory: string,
      _WETH: string,
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    numberOfAllCanceledHashes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfAllCanceledHashes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfCanceledHashesOfFromToken(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfCanceledHashesOfFromToken(address)"(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfCanceledHashesOfMaker(
      maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfCanceledHashesOfMaker(address)"(
      maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfCanceledHashesOfToToken(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfCanceledHashesOfToToken(address)"(
      toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quote(uint256,uint256,uint256)"(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermit(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32,tuple[])"(
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapETHForExactTokens(uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])"(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFee(uint256,uint256)"(
      _feeNumerator: BigNumberish,
      _feeDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
